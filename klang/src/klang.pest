// Pest Grammar for the Custom Language

// The root rule that starts the parsing process.
program = _{ SOI ~ stmt* ~ EOI }

// Statements include function definitions, function calls, and other constructs.
stmt = _{ ( import_stmt | function_def | expr_stmt ) }

// Import statement
import_stmt = _{ "from" ~ IDENT ~ "import" ~ IDENT ~ ("," ~ IDENT)* }

// Function definition
function_def = _{ "fn" ~ IDENT ~ "(" ~ param_list? ~ ")" ~ block }

param_list = _{ (IDENT ~ "=" ~ expr) ~ ("," ~ IDENT ~ "=" ~ expr)* }

// Block of statements enclosed in curly braces
block = _{ "{" ~ stmt* ~ "}" }

// Expression statement
expr_stmt = _{ expr ~ ";"? }

// Expression (can be a function call, assignment, or binary operation)
expr = _{ (
    function_call
    | assignment
    | binary_op
    | unary_op
    | literal
    | loop
    | COMMENT
    | IDENT
) }

// Function call with potential async operator `*`
function_call = _{ ( async_call | standard_call ) }
async_call = _{ "*" ~ standard_call }
standard_call = _{ IDENT ~ "(" ~ arg_list? ~ ")" }
arg_list = _{ expr ~ ("," ~ expr)* }

// Containers
container = _{ list | dict 
list = _{ "[" ~ expr ~ "," ~ expr ~ "]" }

// Assignment statement
assignment = _{ IDENT ~ "=" ~ expr }

// Binary operation (addition, subtraction, etc.)
binary_op = _{ expr ~ binary_operator ~ expr }
binary_operator = _{ "+" | "-" | "*" | "/" | "?" | ":" }

// Unary operation (negation, etc.)
unary_op = _{ unary_operator ~ expr }
unary_operator = _{ "-" | "!" }

// Literals include numbers and units like `30deg`, `0.1rad`
literal = _{ (
    number_with_unit
    | number
    | string
    | boolean
) }

number_with_unit = _{ number ~ unit }
unit = _{ "deg" | "rad" | "m" | "cm" | "mm" | "ft" | "in" }

number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean = _{ "true" | "false" }

// Identifiers (function names, variable names, etc.)
IDENT = @{ ASCII_ALPHANUMERIC+ }

// A loop with `for` and `while` constructs
loop = _{ ( for_loop | while_loop ) }

for_loop = _{ "for" ~ IDENT ~ ":" ~ range ~ block }
while_loop = _{ "while" ~ expr ~ block }

// Comments
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Whitespaces
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
